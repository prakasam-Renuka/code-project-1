
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// ------------------ Quick Sort ------------------
void quickSort(int arr[], int low, int high) {
    int i = low, j = high;
    int pivot = arr[(low + high) / 2];  // middle element as pivot
    int temp;

    while (i <= j) {
        while (arr[i] < pivot) i++;
        while (arr[j] > pivot) j--;
        if (i <= j) {
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
    }

    if (low < j) quickSort(arr, low, j);
    if (i < high) quickSort(arr, i, high);
}

// ------------------ Merge Sort ------------------
void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    int i, j, k;

    int *L = malloc(n1 * sizeof(int));
    int *R = malloc(n2 * sizeof(int));

    if (L == NULL || R == NULL) {
        printf("Memory allocation failed in merge function\n");
        exit(1);
    }

    for (i = 0; i < n1; i++) L[i] = arr[l + i];
    for (j = 0; j < n2; j++) R[j] = arr[m + 1 + j];

    i = 0; j = 0; k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];

    free(L);
    free(R);
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

// ------------------ Helper Functions ------------------
void generateBestCase(int arr[], int n) {
    for (int i = 0; i < n; i++) arr[i] = i; // already sorted
}

void generateAverageCase(int arr[], int n) {
    for (int i = 0; i < n; i++) arr[i] = rand() % (n * 10); // random values
}

void generateWorstCase(int arr[], int n) {
    for (int i = 0; i < n; i++) arr[i] = n - i; // reverse sorted
}

void copyArray(int src[], int dest[], int n) {
    for (int i = 0; i < n; i++) dest[i] = src[i];
}

// ------------------ Main ------------------
int main() {
    int sizes[] = {100, 1000, 5000}; // Different sizes for input arrays
    int i, n, *arr, *temp;
    clock_t start, end;
    double cpu_time_used;

    printf("%-8s %-10s %-15s %-15s\n", "Size", "Case", "QuickSort(s)", "MergeSort(s)");
    printf("-----------------------------------------------------------\n");

    for (i = 0; i < 3; i++) {
        n = sizes[i];
        arr = malloc(n * sizeof(int));
        temp = malloc(n * sizeof(int));

        if (arr == NULL || temp == NULL) {
            printf("Memory allocation failed\n");
            return 1;
        }

        // Best Case
        generateBestCase(arr, n);
        copyArray(arr, temp, n);
        start = clock();
        quickSort(temp, 0, n - 1);
        end = clock();
        cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
        printf("%-8d %-10s %-15.6lf", n, "Best", cpu_time_used);

        copyArray(arr, temp, n);
        start = clock();
        mergeSort(temp, 0, n - 1);
        end = clock();
        cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
        printf("%-15.6lf\n", cpu_time_used);

        // Average Case
        generateAverageCase(arr, n);
        copyArray(arr, temp, n);
        start = clock();
        quickSort(temp, 0, n - 1);
        end = clock();
        cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
        printf("%-8d %-10s %-15.6lf", n, "Average", cpu_time_used);

        copyArray(arr, temp, n);
        start = clock();
        mergeSort(temp, 0, n - 1);
        end = clock();
        cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
        printf("%-15.6lf\n", cpu_time_used);

        // Worst Case
        generateWorstCase(arr, n);
        copyArray(arr, temp, n);
        start = clock();
        quickSort(temp, 0, n - 1);
        end = clock();
        cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
        printf("%-8d %-10s %-15.6lf", n, "Worst", cpu_time_used);

        copyArray(arr, temp, n);
        start = clock();
        mergeSort(temp, 0, n - 1);
        end = clock();
        cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
        printf("%-15.6lf\n", cpu_time_used);

        free(arr);
        free(temp);
    }

    return 0;
}